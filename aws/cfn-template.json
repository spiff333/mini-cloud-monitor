{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": ".",
  "Parameters": {
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium" ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "IotRestApiEndpoint": {
      "Description": "The IoT Rest API endpoint specific to this account.",
      "Type": "String",
      "MinLength": "29",
      "MaxLength": "50",
      "ConstraintDescription": "Must be in the format {identifier}.iot.{region}.amazonaws.com. Use 'aws iot describe-endpoint' in the CLI."
    }
  },
  "Mappings": {
    "Region2Examples": {
      "us-east-1": {  "Examples": "https://s3.amazonaws.com/cloudformation-examples-us-east-1" },
      "us-west-2": { "Examples": "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2" },
      "us-west-1": { "Examples": "https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1" },
      "eu-west-1": { "Examples": "https://s3-eu-west-1.amazonaws.com/cloudformation-examples-eu-west-1" },
      "eu-west-2": { "Examples": "https://s3-eu-west-2.amazonaws.com/cloudformation-examples-eu-west-2" },
      "eu-central-1": { "Examples": "https://s3-eu-central-1.amazonaws.com/cloudformation-examples-eu-central-1" },
      "ap-southeast-1": { "Examples": "https://s3-ap-southeast-1.amazonaws.com/cloudformation-examples-ap-southeast-1" },
      "ap-northeast-1": { "Examples": "https://s3-ap-northeast-1.amazonaws.com/cloudformation-examples-ap-northeast-1" },
      "ap-northeast-2": { "Examples": "https://s3-ap-northeast-2.amazonaws.com/cloudformation-examples-ap-northeast-2" },
      "ap-southeast-2": { "Examples": "https://s3-ap-southeast-2.amazonaws.com/cloudformation-examples-ap-southeast-2" },
      "ap-south-1": { "Examples": "https://s3-ap-south-1.amazonaws.com/cloudformation-examples-ap-south-1" },
      "us-east-2": { "Examples": "https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2" },
      "ca-central-1": { "Examples": "https://s3-ca-central-1.amazonaws.com/cloudformation-examples-ca-central-1" },
      "sa-east-1": { "Examples": "https://s3-sa-east-1.amazonaws.com/cloudformation-examples-sa-east-1" },
      "cn-north-1": { "Examples": "https://s3.cn-north-1.amazonaws.com.cn/cloudformation-examples-cn-north-1" }
    },
    "AWSInstanceType2Arch": {
      "t1.micro": { "Arch": "PV64" },
      "t2.nano": { "Arch": "HVM64" },
      "t2.micro": { "Arch": "HVM64" },
      "t2.small": { "Arch": "HVM64" },
      "t2.medium": { "Arch": "HVM64" }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": { "PV64": "ami-2a69aa47", "HVM64": "ami-6869aa05", "HVMG2": "ami-bb18efad" },
      "us-west-2": { "PV64": "ami-7f77b31f", "HVM64": "ami-7172b611", "HVMG2": "ami-31912f51" },
      "us-west-1": { "PV64": "ami-a2490dc2", "HVM64": "ami-31490d51", "HVMG2": "ami-0a9dcf6a" },
      "eu-west-1": { "PV64": "ami-4cdd453f", "HVM64": "ami-f9dd458a", "HVMG2": "ami-873e61e1" },
      "eu-west-2": { "PV64": "NOT_SUPPORTED", "HVM64": "ami-886369ec", "HVMG2": "NOT_SUPPORTED" },
      "eu-central-1": { "PV64": "ami-6527cf0a", "HVM64": "ami-ea26ce85", "HVMG2": "ami-a16ba4ce" },
      "ap-northeast-1": { "PV64": "ami-3e42b65f", "HVM64": "ami-374db956", "HVMG2": "ami-6b443f0c" },
      "ap-northeast-2": { "PV64": "NOT_SUPPORTED", "HVM64": "ami-2b408b45", "HVMG2": "NOT_SUPPORTED" },
      "ap-southeast-1": { "PV64": "ami-df9e4cbc", "HVM64": "ami-a59b49c6", "HVMG2": "ami-1c0ba17f" },
      "ap-southeast-2": { "PV64": "ami-63351d00", "HVM64": "ami-dc361ebf", "HVMG2": "ami-bf0d0adc" },
      "ap-south-1": { "PV64": "NOT_SUPPORTED", "HVM64": "ami-ffbdd790", "HVMG2": "ami-6135440e" },
      "us-east-2": { "PV64": "NOT_SUPPORTED", "HVM64": "ami-f6035893", "HVMG2": "NOT_SUPPORTED" },
      "ca-central-1": { "PV64": "NOT_SUPPORTED", "HVM64": "ami-730ebd17", "HVMG2": "NOT_SUPPORTED" },
      "sa-east-1": { "PV64": "ami-1ad34676", "HVM64": "ami-6dd04501", "HVMG2": "NOT_SUPPORTED" },
      "cn-north-1": { "PV64": "ami-77559f1a", "HVM64": "ami-8e6aa0e3", "HVMG2": "NOT_SUPPORTED" }
    }
  },
  "Resources": {
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "4",
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Install a simple application",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": {
                "httpd": []
              }
            },
            "files": {
              "/var/www/html/index.html": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "<img src=\"",
                      {
                        "Fn::FindInMap": [
                          "Region2Examples",
                          {
                            "Ref": "AWS::Region"
                          },
                          "Examples"
                        ]
                      },
                      "/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
                      "<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource LaunchConfig ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource LaunchConfig ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource WebServerGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerGroup"
        },
        "Cooldown": "60",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "CrossZone": "true",
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP from the load balancer only",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupOwnerId": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.OwnerAlias"
              ]
            },
            "SourceSecurityGroupName": {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "SourceSecurityGroup.GroupName"
              ]
            }
          }
        ]
      }
    },
    "MiniCloudRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "IoTLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Connect"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Publish",
                    "iot:Subscribe"
                  ],
                  "Resource": [
                    { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/miniCloudMonitorTopic" }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "PublishMqttMessageLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Environment": {
          "Variables" : {
            "MQTT_ENDPOINT": "a3ry5eo3klsw3b.iot.ap-southeast-2.amazonaws.com",
            "MQTT_TOPIC": "miniCloudMonitorTopic"
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MiniCloudRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "var AWS = require('aws-sdk');",
                "var mqtt = new AWS.IotData({endpoint: process.env.MQTT_ENDPOINT});",
                "exports.handler = function(event, context, callback) {",
                "  var params = {",
                "    topic: process.env.MQTT_TOPIC,",
                "    payload: '{\"colour\":\"' + event.colour + '\"}',",
                "    qos: 0",
                "  };",
                "  mqtt.publish(params, function(err, data) {",
                "    callback(err);",
                "  });",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs4.3"
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "PublishMqttMessageLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "*"
      }
    },
    "MiniCloudUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": {
          "Fn::Join": [
            "",
            [
              "/",
              {
                "Ref": "AWS::StackName"
              },
              "/"
            ]
          ]
        },
        "Policies": [
          {
            "PolicyName": "IoTUserPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Connect"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iot:Publish",
                    "iot:Subscribe"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/miniCloudMonitorTopic"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MiniCloudUserAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Status": "Active",
        "UserName": {
          "Ref": "MiniCloudUser"
        }
      }
    },
    "GreenEventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Green state when AutoScaling successfully launches or terminates an instance",
        "EventPattern": {
          "source": [
            "aws.autoscaling"
          ],
          "detail-type": [
            "EC2 Instance Launch Successful",
            "EC2 Instance Terminate Successful"
          ],
          "detail": {
            "AutoScalingGroupName": [
              "Ref": "WebServerGroup"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["PublishMqttMessageLambda", "Arn"] },
          "Id": "PublishMqttMessageFunction",
          "Input": "{\"colour\":\"ffffff\"}"
        }]
      }
    },
    "YellowEventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Yellow state when AutoScaling is taking action",
        "EventPattern": {
          "source": [
            "aws.autoscaling"
          ],
          "detail-type": [
            "EC2 Instance-launch Lifecycle Action",
            "EC2 Instance-terminate Lifecycle Action"
          ],
          "detail": {
            "AutoScalingGroupName": [
              "Ref": "WebServerGroup"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["PublishMqttMessageLambda", "Arn"] },
          "Id": "PublishMqttMessageFunction",
          "Input": "{\"colour\":\"ffee00\"}"
        }]
      }
    },
    "RedEventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Red state when AutoScaling needs to take action",
        "EventPattern": {
          "source": [
            "aws.ec2"
          ],
          "detail-type": [
            "EC2 Instance State-change Notification"
          ],
          "detail": {
            "state": [
              "shutting-down",
              "terminated"
            ]
          }
        },
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["PublishMqttMessageLambda", "Arn"] },
          "Id": "PublishMqttMessageFunction",
          "Input": "{\"colour\":\"ff0000\"}"
        }]
      }
    }
  },
  "Outputs": {
    "URL": {
      "Description": "The URL of the website",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "AccessKey": {
      "Value": {
        "Ref": "MiniCloudUserAccessKey"
      }
    },
    "SecretKey": {
      "Value": {
        "Fn::GetAtt": [
          "MiniCloudUserAccessKey",
          "SecretAccessKey"
        ]
      }
    }
  }
}
